#!/usr/bin/env node

const p = function(...args){ console.log(...args); }

const _ring1 = '00001000100000001011000011101000000011100001110110000000101000000111110000010111';
const _ring2 = '00011111111111111111000001010000000010000000001001000000111000000001110000010011';
const _ring3 = '00000101000000011001000111111111111111110000001101000000100100000001110000001000';
const _ring4 = '00000010000000000001000001010000000001010001111111111111111111111111111111111111';

const _bits = (_ring1 + _ring2 + _ring3 + _ring4).split("").map(function(c){ return(c-0); });

function test(){
   const actual = [];
   for(var i = 0; i < 8; i++){
      actual.push([
         bits_to_bytes([0,0,0,0, 0,0,0,1], i, 8, false),
         bits_to_bytes([0,0,0,0, 0,0,0,1], i, 8, true)
      ]);
   }
   p(actual);
}

function jcopy(a){ return JSON.parse(JSON.stringify(a)); }

function print_possible(data){
   for(let i = 0; i < 7; i++){
      p(`bits:5 shift:${i}     : `, bits_to_str(_bits, i, 5, false));
      p(`bits:5 shift:${i} rev : `, bits_to_str(_bits, i, 5, true));
      p(`bits:6 shift:${i}     : `, bits_to_str(_bits, i, 6, false));
      p(`bits:6 shift:${i} rev : `, bits_to_str(_bits, i, 6, true));
      p(`bits:7 shift:${i}     : `, bits_to_str(_bits, i, 7, false));
      p(`bits:7 shift:${i} rev : `, bits_to_str(_bits, i, 7, true));
      p(`bits:8 shift:${i}     : `, bits_to_str(_bits, i, 8, false));
      p(`bits:8 shift:${i} rev : `, bits_to_str(_bits, i, 8, true));
   }
}

function bits_to_str(bits, shift, byte_len){ return bits_to_chars(bits, shift, byte_len).join(""); }

const alphabet = "abcdefghijklmnopqrstuvwxyz".split("");

function bits_to_chars(bits, shift, byte_len){
   return bits_to_bytes(bits, shift, byte_len).map(function(v){
      if(byte_len < 8){ return alphabet[v] }
      else{ return String.fromCharCode(v); }
   });
}

function bits_to_bytes(bits, shift, byte_len, reverse){
   bits = jcopy(bits);
   for(let i = 0; i < shift; i++){ bits.push(bits.shift()); }

   const bytes = [];

   while(bits.length){
      let byte = 0;
      if(reverse){
         for(let i = 0; i < byte_len; i++){ byte += bits.shift() << i; }
      }else{
         for(let i = (byte_len-1); i >= 0; i--){ byte += bits.shift() << i; }
      }
      bytes.push(byte);
   }
   return(bytes);
}


(function main(){
   test();
   print_possible(_bits);
})();

